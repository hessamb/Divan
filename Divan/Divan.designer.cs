#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Divan
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DivanDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAction(Action instance);
    partial void UpdateAction(Action instance);
    partial void DeleteAction(Action instance);
    partial void InsertConsistencyRule(ConsistencyRule instance);
    partial void UpdateConsistencyRule(ConsistencyRule instance);
    partial void DeleteConsistencyRule(ConsistencyRule instance);
    partial void InsertDiscreteDomainValue(DiscreteDomainValue instance);
    partial void UpdateDiscreteDomainValue(DiscreteDomainValue instance);
    partial void DeleteDiscreteDomainValue(DiscreteDomainValue instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertLabel(Label instance);
    partial void UpdateLabel(Label instance);
    partial void DeleteLabel(Label instance);
    partial void InsertLabelDomain(LabelDomain instance);
    partial void UpdateLabelDomain(LabelDomain instance);
    partial void DeleteLabelDomain(LabelDomain instance);
    partial void InsertLabelInstance(LabelInstance instance);
    partial void UpdateLabelInstance(LabelInstance instance);
    partial void DeleteLabelInstance(LabelInstance instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertAttachedFile(AttachedFile instance);
    partial void UpdateAttachedFile(AttachedFile instance);
    partial void DeleteAttachedFile(AttachedFile instance);
    partial void InsertAsset(Asset instance);
    partial void UpdateAsset(Asset instance);
    partial void DeleteAsset(Asset instance);
    partial void InsertSubAction(SubAction instance);
    partial void UpdateSubAction(SubAction instance);
    partial void DeleteSubAction(SubAction instance);
    partial void InsertGISRecord(GISRecord instance);
    partial void UpdateGISRecord(GISRecord instance);
    partial void DeleteGISRecord(GISRecord instance);
    #endregion
		
		public DivanDataContext() : 
				base(global::Divan.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DivanDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DivanDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DivanDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DivanDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Action> Actions
		{
			get
			{
				return this.GetTable<Action>();
			}
		}
		
		public System.Data.Linq.Table<ConsistencyRule> ConsistencyRules
		{
			get
			{
				return this.GetTable<ConsistencyRule>();
			}
		}
		
		public System.Data.Linq.Table<DiscreteDomainValue> DiscreteDomainValues
		{
			get
			{
				return this.GetTable<DiscreteDomainValue>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Label> Labels
		{
			get
			{
				return this.GetTable<Label>();
			}
		}
		
		public System.Data.Linq.Table<LabelDomain> LabelDomains
		{
			get
			{
				return this.GetTable<LabelDomain>();
			}
		}
		
		public System.Data.Linq.Table<LabelInstance> LabelInstances
		{
			get
			{
				return this.GetTable<LabelInstance>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<AttachedFile> AttachedFiles
		{
			get
			{
				return this.GetTable<AttachedFile>();
			}
		}
		
		public System.Data.Linq.Table<Asset> Assets
		{
			get
			{
				return this.GetTable<Asset>();
			}
		}
		
		public System.Data.Linq.Table<SubAction> SubActions
		{
			get
			{
				return this.GetTable<SubAction>();
			}
		}
		
		public System.Data.Linq.Table<GISRecord> GISRecords
		{
			get
			{
				return this.GetTable<GISRecord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Action")]
	public partial class Action : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _value;
		
		private System.Nullable<bool> _needsAutoRun;
		
		private System.Nullable<int> _autoRunPeriod;
		
		private int _labelID;
		
		private int _assetID;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<SubAction> _SuperActions;
		
		private EntitySet<SubAction> _SubActions;
		
		private EntityRef<Label> _Label;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnneedsAutoRunChanging(System.Nullable<bool> value);
    partial void OnneedsAutoRunChanged();
    partial void OnautoRunPeriodChanging(System.Nullable<int> value);
    partial void OnautoRunPeriodChanged();
    partial void OnlabelIDChanging(int value);
    partial void OnlabelIDChanged();
    partial void OnassetIDChanging(int value);
    partial void OnassetIDChanged();
    #endregion
		
		public Action()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._SuperActions = new EntitySet<SubAction>(new Action<SubAction>(this.attach_SuperActions), new Action<SubAction>(this.detach_SuperActions));
			this._SubActions = new EntitySet<SubAction>(new Action<SubAction>(this.attach_SubActions), new Action<SubAction>(this.detach_SubActions));
			this._Label = default(EntityRef<Label>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_needsAutoRun", DbType="Bit")]
		public System.Nullable<bool> needsAutoRun
		{
			get
			{
				return this._needsAutoRun;
			}
			set
			{
				if ((this._needsAutoRun != value))
				{
					this.OnneedsAutoRunChanging(value);
					this.SendPropertyChanging();
					this._needsAutoRun = value;
					this.SendPropertyChanged("needsAutoRun");
					this.OnneedsAutoRunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_autoRunPeriod", DbType="Int")]
		public System.Nullable<int> autoRunPeriod
		{
			get
			{
				return this._autoRunPeriod;
			}
			set
			{
				if ((this._autoRunPeriod != value))
				{
					this.OnautoRunPeriodChanging(value);
					this.SendPropertyChanging();
					this._autoRunPeriod = value;
					this.SendPropertyChanged("autoRunPeriod");
					this.OnautoRunPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labelID", DbType="Int NOT NULL")]
		public int labelID
		{
			get
			{
				return this._labelID;
			}
			set
			{
				if ((this._labelID != value))
				{
					if (this._Label.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlabelIDChanging(value);
					this.SendPropertyChanging();
					this._labelID = value;
					this.SendPropertyChanged("labelID");
					this.OnlabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetID", DbType="Int NOT NULL")]
		public int assetID
		{
			get
			{
				return this._assetID;
			}
			set
			{
				if ((this._assetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIDChanging(value);
					this.SendPropertyChanging();
					this._assetID = value;
					this.SendPropertyChanged("assetID");
					this.OnassetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_Event", Storage="_Events", ThisKey="Id", OtherKey="ActionID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_SubAction", Storage="_SuperActions", ThisKey="Id", OtherKey="childId")]
		public EntitySet<SubAction> SuperActionsM2M
		{
			get
			{
				return this._SuperActions;
			}
			set
			{
				this._SuperActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_SubAction1", Storage="_SubActions", ThisKey="Id", OtherKey="parentId")]
		public EntitySet<SubAction> SubActionsM2M
		{
			get
			{
				return this._SubActions;
			}
			set
			{
				this._SubActions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Label_Action", Storage="_Label", ThisKey="labelID", OtherKey="Id", IsForeignKey=true)]
		public Label Label
		{
			get
			{
				return this._Label.Entity;
			}
			set
			{
				Label previousValue = this._Label.Entity;
				if (((previousValue != value) 
							|| (this._Label.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Label.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._Label.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._labelID = value.Id;
					}
					else
					{
						this._labelID = default(int);
					}
					this.SendPropertyChanged("Label");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Action", Storage="_Asset", ThisKey="assetID", OtherKey="Id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._assetID = value.Id;
					}
					else
					{
						this._assetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Action = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Action = null;
		}
		
		private void attach_SuperActions(SubAction entity)
		{
			this.SendPropertyChanging();
			entity.Child = this;
		}
		
		private void detach_SuperActions(SubAction entity)
		{
			this.SendPropertyChanging();
			entity.Child = null;
		}
		
		private void attach_SubActions(SubAction entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_SubActions(SubAction entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsistencyRule")]
	public partial class ConsistencyRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _sValue;
		
		private string _mValue;
		
		private string _condition;
		
		private int _importance;
		
		private int _assetID;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnsValueChanging(string value);
    partial void OnsValueChanged();
    partial void OnmValueChanging(string value);
    partial void OnmValueChanged();
    partial void OnconditionChanging(string value);
    partial void OnconditionChanged();
    partial void OnimportanceChanging(int value);
    partial void OnimportanceChanged();
    partial void OnassetIDChanging(int value);
    partial void OnassetIDChanged();
    #endregion
		
		public ConsistencyRule()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sValue", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string sValue
		{
			get
			{
				return this._sValue;
			}
			set
			{
				if ((this._sValue != value))
				{
					this.OnsValueChanging(value);
					this.SendPropertyChanging();
					this._sValue = value;
					this.SendPropertyChanged("sValue");
					this.OnsValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mValue", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string mValue
		{
			get
			{
				return this._mValue;
			}
			set
			{
				if ((this._mValue != value))
				{
					this.OnmValueChanging(value);
					this.SendPropertyChanging();
					this._mValue = value;
					this.SendPropertyChanged("mValue");
					this.OnmValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_condition", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string condition
		{
			get
			{
				return this._condition;
			}
			set
			{
				if ((this._condition != value))
				{
					this.OnconditionChanging(value);
					this.SendPropertyChanging();
					this._condition = value;
					this.SendPropertyChanged("condition");
					this.OnconditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_importance", DbType="Int NOT NULL")]
		public int importance
		{
			get
			{
				return this._importance;
			}
			set
			{
				if ((this._importance != value))
				{
					this.OnimportanceChanging(value);
					this.SendPropertyChanging();
					this._importance = value;
					this.SendPropertyChanged("importance");
					this.OnimportanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetID", DbType="Int NOT NULL")]
		public int assetID
		{
			get
			{
				return this._assetID;
			}
			set
			{
				if ((this._assetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIDChanging(value);
					this.SendPropertyChanging();
					this._assetID = value;
					this.SendPropertyChanged("assetID");
					this.OnassetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_ConsistencyRule", Storage="_Asset", ThisKey="assetID", OtherKey="Id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.ConsistencyRules.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.ConsistencyRules.Add(this);
						this._assetID = value.Id;
					}
					else
					{
						this._assetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscreteDomainValue")]
	public partial class DiscreteDomainValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _value;
		
		private int _domainID;
		
		private System.Nullable<int> _rank;
		
		private EntityRef<LabelDomain> _LabelDomain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndomainIDChanging(int value);
    partial void OndomainIDChanged();
    partial void OnrankChanging(System.Nullable<int> value);
    partial void OnrankChanged();
    #endregion
		
		public DiscreteDomainValue()
		{
			this._LabelDomain = default(EntityRef<LabelDomain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_domainID", DbType="Int NOT NULL")]
		public int domainID
		{
			get
			{
				return this._domainID;
			}
			set
			{
				if ((this._domainID != value))
				{
					if (this._LabelDomain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndomainIDChanging(value);
					this.SendPropertyChanging();
					this._domainID = value;
					this.SendPropertyChanged("domainID");
					this.OndomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rank")]
		public System.Nullable<int> rank
		{
			get
			{
				return this._rank;
			}
			set
			{
				if ((this._rank != value))
				{
					this.OnrankChanging(value);
					this.SendPropertyChanging();
					this._rank = value;
					this.SendPropertyChanged("rank");
					this.OnrankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDomain_DiscreteDomainValue", Storage="_LabelDomain", ThisKey="domainID", OtherKey="Id", IsForeignKey=true)]
		public LabelDomain LabelDomain
		{
			get
			{
				return this._LabelDomain.Entity;
			}
			set
			{
				LabelDomain previousValue = this._LabelDomain.Entity;
				if (((previousValue != value) 
							|| (this._LabelDomain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabelDomain.Entity = null;
						previousValue.DiscreteDomainValues.Remove(this);
					}
					this._LabelDomain.Entity = value;
					if ((value != null))
					{
						value.DiscreteDomainValues.Add(this);
						this._domainID = value.Id;
					}
					else
					{
						this._domainID = default(int);
					}
					this.SendPropertyChanged("LabelDomain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _ActionID;
		
		private EntityRef<Action> _Action;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    #endregion
		
		public Event()
		{
			this._Action = default(EntityRef<Action>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL")]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					if (this._Action.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_Event", Storage="_Action", ThisKey="ActionID", OtherKey="Id", IsForeignKey=true)]
		public Action Action
		{
			get
			{
				return this._Action.Entity;
			}
			set
			{
				Action previousValue = this._Action.Entity;
				if (((previousValue != value) 
							|| (this._Action.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Action.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Action.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._ActionID = value.Id;
					}
					else
					{
						this._ActionID = default(int);
					}
					this.SendPropertyChanged("Action");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Label")]
	public partial class Label : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private bool _isChangable;
		
		private System.Nullable<int> _domainID;
		
		private bool _isSplitter;
		
		private bool _visible;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<LabelInstance> _LabelInstances;
		
		private EntityRef<LabelDomain> _LabelDomain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsetValueChanging(bool value);
    partial void OnsetValueChanged();
    partial void OndomainIDChanging(System.Nullable<int> value);
    partial void OndomainIDChanged();
    partial void OnisSplitterChanging(bool value);
    partial void OnisSplitterChanged();
    partial void OnvisibleChanging(bool value);
    partial void OnvisibleChanged();
    #endregion
		
		public Label()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._LabelInstances = new EntitySet<LabelInstance>(new Action<LabelInstance>(this.attach_LabelInstances), new Action<LabelInstance>(this.detach_LabelInstances));
			this._LabelDomain = default(EntityRef<LabelDomain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isChangable", DbType="Bit NOT NULL")]
		public bool setValue
		{
			get
			{
				return this._isChangable;
			}
			set
			{
				if ((this._isChangable != value))
				{
					this.OnsetValueChanging(value);
					this.SendPropertyChanging();
					this._isChangable = value;
					this.SendPropertyChanged("setValue");
					this.OnsetValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_domainID", DbType="Int NULL")]
		public System.Nullable<int> domainID
		{
			get
			{
				return this._domainID;
			}
			set
			{
				if ((this._domainID != value))
				{
					if (this._LabelDomain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndomainIDChanging(value);
					this.SendPropertyChanging();
					this._domainID = value;
					this.SendPropertyChanged("domainID");
					this.OndomainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSplitter", DbType="Bit NOT NULL")]
		public bool isSplitter
		{
			get
			{
				return this._isSplitter;
			}
			set
			{
				if ((this._isSplitter != value))
				{
					this.OnisSplitterChanging(value);
					this.SendPropertyChanging();
					this._isSplitter = value;
					this.SendPropertyChanged("isSplitter");
					this.OnisSplitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visible", DbType="BIT NOT NULL")]
		public bool visible
		{
			get
			{
				return this._visible;
			}
			set
			{
				if ((this._visible != value))
				{
					this.OnvisibleChanging(value);
					this.SendPropertyChanging();
					this._visible = value;
					this.SendPropertyChanged("visible");
					this.OnvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Label_Action", Storage="_Actions", ThisKey="Id", OtherKey="labelID")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Label_LabelInstance", Storage="_LabelInstances", ThisKey="Id", OtherKey="labelID")]
		public EntitySet<LabelInstance> LabelInstances
		{
			get
			{
				return this._LabelInstances;
			}
			set
			{
				this._LabelInstances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDomain_Label", Storage="_LabelDomain", ThisKey="domainID", OtherKey="Id", IsForeignKey=true)]
		public LabelDomain LabelDomain
		{
			get
			{
				return this._LabelDomain.Entity;
			}
			set
			{
				LabelDomain previousValue = this._LabelDomain.Entity;
				if (((previousValue != value) 
							|| (this._LabelDomain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabelDomain.Entity = null;
						previousValue.Labels.Remove(this);
					}
					this._LabelDomain.Entity = value;
					if ((value != null))
					{
						value.Labels.Add(this);
						this._domainID = value.Id;
					}
					else
					{
						this._domainID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabelDomain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Label = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Label = null;
		}
		
		private void attach_LabelInstances(LabelInstance entity)
		{
			this.SendPropertyChanging();
			entity.Label = this;
		}
		
		private void detach_LabelInstances(LabelInstance entity)
		{
			this.SendPropertyChanging();
			entity.Label = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelDomain")]
	public partial class LabelDomain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<float> _minValue;
		
		private System.Nullable<float> _maxValue;
		
		private System.Nullable<bool> _isOrdered;
		
		private EntitySet<DiscreteDomainValue> _DiscreteDomainValues;
		
		private EntitySet<Label> _Labels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnminValueChanging(System.Nullable<float> value);
    partial void OnminValueChanged();
    partial void OnmaxValueChanging(System.Nullable<float> value);
    partial void OnmaxValueChanged();
    partial void OnisOrderedChanging(System.Nullable<bool> value);
    partial void OnisOrderedChanged();
    #endregion
		
		public LabelDomain()
		{
			this._DiscreteDomainValues = new EntitySet<DiscreteDomainValue>(new Action<DiscreteDomainValue>(this.attach_DiscreteDomainValues), new Action<DiscreteDomainValue>(this.detach_DiscreteDomainValues));
			this._Labels = new EntitySet<Label>(new Action<Label>(this.attach_Labels), new Action<Label>(this.detach_Labels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minValue", DbType="real")]
		public System.Nullable<float> minValue
		{
			get
			{
				return this._minValue;
			}
			set
			{
				if ((this._minValue != value))
				{
					this.OnminValueChanging(value);
					this.SendPropertyChanging();
					this._minValue = value;
					this.SendPropertyChanged("minValue");
					this.OnminValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxValue", DbType="real")]
		public System.Nullable<float> maxValue
		{
			get
			{
				return this._maxValue;
			}
			set
			{
				if ((this._maxValue != value))
				{
					this.OnmaxValueChanging(value);
					this.SendPropertyChanging();
					this._maxValue = value;
					this.SendPropertyChanged("maxValue");
					this.OnmaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOrdered")]
		public System.Nullable<bool> isOrdered
		{
			get
			{
				return this._isOrdered;
			}
			set
			{
				if ((this._isOrdered != value))
				{
					this.OnisOrderedChanging(value);
					this.SendPropertyChanging();
					this._isOrdered = value;
					this.SendPropertyChanged("isOrdered");
					this.OnisOrderedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDomain_DiscreteDomainValue", Storage="_DiscreteDomainValues", ThisKey="Id", OtherKey="domainID")]
		public EntitySet<DiscreteDomainValue> DiscreteDomainValues
		{
			get
			{
				return this._DiscreteDomainValues;
			}
			set
			{
				this._DiscreteDomainValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabelDomain_Label", Storage="_Labels", ThisKey="Id", OtherKey="domainID")]
		public EntitySet<Label> Labels
		{
			get
			{
				return this._Labels;
			}
			set
			{
				this._Labels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiscreteDomainValues(DiscreteDomainValue entity)
		{
			this.SendPropertyChanging();
			entity.LabelDomain = this;
		}
		
		private void detach_DiscreteDomainValues(DiscreteDomainValue entity)
		{
			this.SendPropertyChanging();
			entity.LabelDomain = null;
		}
		
		private void attach_Labels(Label entity)
		{
			this.SendPropertyChanging();
			entity.LabelDomain = this;
		}
		
		private void detach_Labels(Label entity)
		{
			this.SendPropertyChanging();
			entity.LabelDomain = null;
		}
	}
	
	public partial class ContinuousDomain : LabelDomain
	{
		
		private System.Nullable<float> _minValue;
		
		private System.Nullable<float> _maxValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnminValueChanging(System.Nullable<float> value);
    partial void OnminValueChanged();
    partial void OnmaxValueChanging(System.Nullable<float> value);
    partial void OnmaxValueChanged();
    #endregion
		
		public ContinuousDomain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minValue", DbType="real")]
		public System.Nullable<float> minValue
		{
			get
			{
				return this._minValue;
			}
			set
			{
				if ((this._minValue != value))
				{
					this.OnminValueChanging(value);
					this.SendPropertyChanging();
					this._minValue = value;
					this.SendPropertyChanged("minValue");
					this.OnminValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxValue", DbType="real")]
		public System.Nullable<float> maxValue
		{
			get
			{
				return this._maxValue;
			}
			set
			{
				if ((this._maxValue != value))
				{
					this.OnmaxValueChanging(value);
					this.SendPropertyChanging();
					this._maxValue = value;
					this.SendPropertyChanged("maxValue");
					this.OnmaxValueChanged();
				}
			}
		}
	}
	
	public partial class DiscreteDomain : LabelDomain
	{
		
		private System.Nullable<bool> _isOrdered;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnisOrderedChanging(System.Nullable<bool> value);
    partial void OnisOrderedChanged();
    #endregion
		
		public DiscreteDomain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isOrdered")]
		public System.Nullable<bool> isOrdered
		{
			get
			{
				return this._isOrdered;
			}
			set
			{
				if ((this._isOrdered != value))
				{
					this.OnisOrderedChanging(value);
					this.SendPropertyChanging();
					this._isOrdered = value;
					this.SendPropertyChanged("isOrdered");
					this.OnisOrderedChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabelInstance")]
	public partial class LabelInstance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _labelID;
		
		private string _value;
		
		private int _assetID;
		
		private EntityRef<Label> _Label;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnlabelIDChanging(int value);
    partial void OnlabelIDChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnassetIDChanging(int value);
    partial void OnassetIDChanged();
    #endregion
		
		public LabelInstance()
		{
			this._Label = default(EntityRef<Label>);
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_labelID", DbType="Int NOT NULL")]
		public int labelID
		{
			get
			{
				return this._labelID;
			}
			set
			{
				if ((this._labelID != value))
				{
					if (this._Label.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlabelIDChanging(value);
					this.SendPropertyChanging();
					this._labelID = value;
					this.SendPropertyChanged("labelID");
					this.OnlabelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetID", DbType="Int NOT NULL")]
		public int assetID
		{
			get
			{
				return this._assetID;
			}
			set
			{
				if ((this._assetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIDChanging(value);
					this.SendPropertyChanging();
					this._assetID = value;
					this.SendPropertyChanged("assetID");
					this.OnassetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Label_LabelInstance", Storage="_Label", ThisKey="labelID", OtherKey="Id", IsForeignKey=true)]
		public Label Label
		{
			get
			{
				return this._Label.Entity;
			}
			set
			{
				Label previousValue = this._Label.Entity;
				if (((previousValue != value) 
							|| (this._Label.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Label.Entity = null;
						previousValue.LabelInstances.Remove(this);
					}
					this._Label.Entity = value;
					if ((value != null))
					{
						value.LabelInstances.Add(this);
						this._labelID = value.Id;
					}
					else
					{
						this._labelID = default(int);
					}
					this.SendPropertyChanged("Label");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_LabelInstance", Storage="_Asset", ThisKey="assetID", OtherKey="Id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.LabelInstances.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.LabelInstances.Add(this);
						this._assetID = value.Id;
					}
					else
					{
						this._assetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _name;
		
		private string _type;
		
		private string _value;
		
		private int _assetID;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnassetIDChanging(int value);
    partial void OnassetIDChanged();
    #endregion
		
		public Property()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetID", DbType="Int NOT NULL")]
		public int assetID
		{
			get
			{
				return this._assetID;
			}
			set
			{
				if ((this._assetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIDChanging(value);
					this.SendPropertyChanging();
					this._assetID = value;
					this.SendPropertyChanged("assetID");
					this.OnassetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Property", Storage="_Asset", ThisKey="assetID", OtherKey="Id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.Properties.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.Properties.Add(this);
						this._assetID = value.Id;
					}
					else
					{
						this._assetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttachedFile")]
	public partial class AttachedFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _path;
		
		private int _assetID;
		
		private EntityRef<Asset> _Asset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnassetIDChanging(int value);
    partial void OnassetIDChanged();
    #endregion
		
		public AttachedFile()
		{
			this._Asset = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assetID", DbType="Int NOT NULL")]
		public int assetID
		{
			get
			{
				return this._assetID;
			}
			set
			{
				if ((this._assetID != value))
				{
					if (this._Asset.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnassetIDChanging(value);
					this.SendPropertyChanging();
					this._assetID = value;
					this.SendPropertyChanged("assetID");
					this.OnassetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AttachedFile", Storage="_Asset", ThisKey="assetID", OtherKey="Id", IsForeignKey=true)]
		public Asset Asset
		{
			get
			{
				return this._Asset.Entity;
			}
			set
			{
				Asset previousValue = this._Asset.Entity;
				if (((previousValue != value) 
							|| (this._Asset.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Asset.Entity = null;
						previousValue.AttachedFiles.Remove(this);
					}
					this._Asset.Entity = value;
					if ((value != null))
					{
						value.AttachedFiles.Add(this);
						this._assetID = value.Id;
					}
					else
					{
						this._assetID = default(int);
					}
					this.SendPropertyChanged("Asset");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Asset")]
	public partial class Asset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _isHuman;
		
		private bool _isPortable;
		
		private bool _isPhysical;
		
		private System.Nullable<int> _parentId;
		
		private bool _visible;
		
		private EntitySet<Action> _Actions;
		
		private EntitySet<ConsistencyRule> _ConsistencyRules;
		
		private EntitySet<LabelInstance> _LabelInstances;
		
		private EntitySet<Property> _Properties;
		
		private EntitySet<AttachedFile> _AttachedFiles;
		
		private EntitySet<Asset> _SubAssets;
		
		private EntityRef<Asset> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnisHumanChanging(bool value);
    partial void OnisHumanChanged();
    partial void OnisPortableChanging(bool value);
    partial void OnisPortableChanged();
    partial void OnisPhysicalChanging(bool value);
    partial void OnisPhysicalChanged();
    partial void OnparentIdChanging(System.Nullable<int> value);
    partial void OnparentIdChanged();
    partial void OnvisibleChanging(bool value);
    partial void OnvisibleChanged();
    #endregion
		
		public Asset()
		{
			this._Actions = new EntitySet<Action>(new Action<Action>(this.attach_Actions), new Action<Action>(this.detach_Actions));
			this._ConsistencyRules = new EntitySet<ConsistencyRule>(new Action<ConsistencyRule>(this.attach_ConsistencyRules), new Action<ConsistencyRule>(this.detach_ConsistencyRules));
			this._LabelInstances = new EntitySet<LabelInstance>(new Action<LabelInstance>(this.attach_LabelInstances), new Action<LabelInstance>(this.detach_LabelInstances));
			this._Properties = new EntitySet<Property>(new Action<Property>(this.attach_Properties), new Action<Property>(this.detach_Properties));
			this._AttachedFiles = new EntitySet<AttachedFile>(new Action<AttachedFile>(this.attach_AttachedFiles), new Action<AttachedFile>(this.detach_AttachedFiles));
			this._SubAssets = new EntitySet<Asset>(new Action<Asset>(this.attach_SubAssets), new Action<Asset>(this.detach_SubAssets));
			this._Parent = default(EntityRef<Asset>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHuman", DbType="Bit NOT NULL")]
		public bool isHuman
		{
			get
			{
				return this._isHuman;
			}
			set
			{
				if ((this._isHuman != value))
				{
					this.OnisHumanChanging(value);
					this.SendPropertyChanging();
					this._isHuman = value;
					this.SendPropertyChanged("isHuman");
					this.OnisHumanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPortable", DbType="Bit NOT NULL")]
		public bool isPortable
		{
			get
			{
				return this._isPortable;
			}
			set
			{
				if ((this._isPortable != value))
				{
					this.OnisPortableChanging(value);
					this.SendPropertyChanging();
					this._isPortable = value;
					this.SendPropertyChanged("isPortable");
					this.OnisPortableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPhysical", DbType="Bit NOT NULL")]
		public bool isPhysical
		{
			get
			{
				return this._isPhysical;
			}
			set
			{
				if ((this._isPhysical != value))
				{
					this.OnisPhysicalChanging(value);
					this.SendPropertyChanging();
					this._isPhysical = value;
					this.SendPropertyChanged("isPhysical");
					this.OnisPhysicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="Int")]
		public System.Nullable<int> parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visible", DbType="BIT NOT NULL")]
		public bool visible
		{
			get
			{
				return this._visible;
			}
			set
			{
				if ((this._visible != value))
				{
					this.OnvisibleChanging(value);
					this.SendPropertyChanging();
					this._visible = value;
					this.SendPropertyChanged("visible");
					this.OnvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Action", Storage="_Actions", ThisKey="Id", OtherKey="assetID")]
		public EntitySet<Action> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_ConsistencyRule", Storage="_ConsistencyRules", ThisKey="Id", OtherKey="assetID")]
		public EntitySet<ConsistencyRule> ConsistencyRules
		{
			get
			{
				return this._ConsistencyRules;
			}
			set
			{
				this._ConsistencyRules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_LabelInstance", Storage="_LabelInstances", ThisKey="Id", OtherKey="assetID")]
		public EntitySet<LabelInstance> LabelInstances
		{
			get
			{
				return this._LabelInstances;
			}
			set
			{
				this._LabelInstances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Property", Storage="_Properties", ThisKey="Id", OtherKey="assetID")]
		public EntitySet<Property> Properties
		{
			get
			{
				return this._Properties;
			}
			set
			{
				this._Properties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_AttachedFile", Storage="_AttachedFiles", ThisKey="Id", OtherKey="assetID")]
		public EntitySet<AttachedFile> AttachedFiles
		{
			get
			{
				return this._AttachedFiles;
			}
			set
			{
				this._AttachedFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Asset", Storage="_SubAssets", ThisKey="Id", OtherKey="parentId")]
		public EntitySet<Asset> SubAssets
		{
			get
			{
				return this._SubAssets;
			}
			set
			{
				this._SubAssets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Asset_Asset", Storage="_Parent", ThisKey="parentId", OtherKey="Id", IsForeignKey=true)]
		public Asset Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Asset previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SubAssets.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SubAssets.Add(this);
						this._parentId = value.Id;
					}
					else
					{
						this._parentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Actions(Action entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_ConsistencyRules(ConsistencyRule entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_ConsistencyRules(ConsistencyRule entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_LabelInstances(LabelInstance entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_LabelInstances(LabelInstance entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_Properties(Property entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_AttachedFiles(AttachedFile entity)
		{
			this.SendPropertyChanging();
			entity.Asset = this;
		}
		
		private void detach_AttachedFiles(AttachedFile entity)
		{
			this.SendPropertyChanging();
			entity.Asset = null;
		}
		
		private void attach_SubAssets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_SubAssets(Asset entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubAction")]
	public partial class SubAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _parentId;
		
		private int _childId;
		
		private EntityRef<Action> _Child;
		
		private EntityRef<Action> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnparentIdChanging(int value);
    partial void OnparentIdChanged();
    partial void OnchildIdChanging(int value);
    partial void OnchildIdChanged();
    #endregion
		
		public SubAction()
		{
			this._Child = default(EntityRef<Action>);
			this._Parent = default(EntityRef<Action>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentId", DbType="Int NOT NULL")]
		public int parentId
		{
			get
			{
				return this._parentId;
			}
			set
			{
				if ((this._parentId != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentIdChanging(value);
					this.SendPropertyChanging();
					this._parentId = value;
					this.SendPropertyChanged("parentId");
					this.OnparentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_childId", DbType="Int NOT NULL")]
		public int childId
		{
			get
			{
				return this._childId;
			}
			set
			{
				if ((this._childId != value))
				{
					if (this._Child.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnchildIdChanging(value);
					this.SendPropertyChanging();
					this._childId = value;
					this.SendPropertyChanged("childId");
					this.OnchildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_SubAction", Storage="_Child", ThisKey="childId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Action Child
		{
			get
			{
				return this._Child.Entity;
			}
			set
			{
				Action previousValue = this._Child.Entity;
				if (((previousValue != value) 
							|| (this._Child.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Child.Entity = null;
						previousValue.SuperActionsM2M.Remove(this);
					}
					this._Child.Entity = value;
					if ((value != null))
					{
						value.SuperActionsM2M.Add(this);
						this._childId = value.Id;
					}
					else
					{
						this._childId = default(int);
					}
					this.SendPropertyChanged("Child");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Action_SubAction1", Storage="_Parent", ThisKey="parentId", OtherKey="Id", IsForeignKey=true)]
		public Action Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Action previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.SubActionsM2M.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.SubActionsM2M.Add(this);
						this._parentId = value.Id;
					}
					else
					{
						this._parentId = default(int);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GISRecord")]
	public partial class GISRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UID;
		
		private string _location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public GISRecord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(50)")]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(100)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
